class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        
        if (grid[0][0] == 1) return 0;
        
        int[][] dp = new int[n][m];
        
        // 0th row: movement from left -> right
        for (int j = 0; j < m; j++) {
            if (grid[0][j] == 1) break;
            dp[0][j] = 1;
        }
        
        // 0th col: movement from top -> bottom
        for (int i = 0; i < n; i++) {
            if (grid[i][0] == 1) break;
            dp[i][0] = 1;
        }
        
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (grid[i][j] == 1) continue;
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[n - 1][m - 1];
    }
}
